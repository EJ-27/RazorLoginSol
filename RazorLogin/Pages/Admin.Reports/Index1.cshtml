@page
@model RazorLogin.Pages.Admin.Reports.Index1Model

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Annual Employee Cost</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" />
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        /* Custom light brown background and dark brown text */
        body {
            background-color: #FFFFFF; /* White background */
            color: #3E1F1B; /* Dark Brown */
        }

        .card-header {
            background-color: #D6B39D; /* Lighter Brown for Card Headers */
            color: #3E1F1B; /* Dark Brown Text */
        }

        .list-group-item {
            background-color: #F4E1C1; /* Same as the body background */
            border: 1px solid #D6B39D; /* Subtle border */
        }

        .btn-primary {
            background-color: #9C6A47; /* Medium brown button */
            border-color: #9C6A47;
        }

        .btn-primary:hover {
            background-color: #7A4F33; /* Darker brown on hover */
            border-color: #7A4F33;
        }

        .text-muted {
            color: #6A3F30 !important; /* Muted dark brown for descriptions */
        }
    </style>
</head>
<body>
    <div class="container mt-5">
        <h1 class="text-center mb-4">Employee Report</h1>

        <!-- Date Range Form -->
        <form method="get" class="mb-5">
            <div class="form-row">
                <div class="form-group col-md-6">
                    <label for="StartDate">Start Date</label>
                    <input type="date" class="form-control" asp-for="StartDate" />
                </div>
                <div class="form-group col-md-6">
                    <label for="EndDate">End Date</label>
                    <input type="date" class="form-control" asp-for="EndDate" />
                </div>
            </div>
            <button type="submit" class="btn btn-primary">Calculate Days</button>
        </form>

        <!-- Display the result if both dates are provided -->
        @if (Model.StartDate.HasValue && Model.EndDate.HasValue)
        {
            <h3 class="mb-4">Days Between: @Model.TimeSpanInDays</h3>
        }

        <!-- Total Employee Salary Cost Card -->
        <div class="card mb-4">
            <div class="card-header">
                <h5>Total Employee Salary Cost</h5>
            </div>
            <div class="card-body">
                <ul class="list-group">
                    <li class="list-group-item">Total Cost: @Model.Report.totalEmployeeSalary</li>
                </ul>
            </div>
        </div>

        <!-- Dependent Healthcare Premium Income Card -->
        <div class="card mb-4">
            <div class="card-header">
                <h5>Dependent Healthcare Premium Income</h5>
                <h6 class="text-muted">Healthcare premiums for dependents are paid every 30 days:</h6>
                <p class="mb-0">Tier 1: $70 | Tier 2: $140 | Tier 3: $200</p>
            </div>
            <div class="card-body">
                <ul class="list-group">
                    <li class="list-group-item">Tier 1 (@Model.Report.Tier1CT Dependent(s)): @Model.Report.Tier1Income</li>
                    <li class="list-group-item">Tier 2 (@Model.Report.Tier2CT Dependent(s)): @Model.Report.Tier2Income</li>
                    <li class="list-group-item">Tier 3 (@Model.Report.Tier3CT Dependent(s)): @Model.Report.Tier3Income</li>
                </ul>
            </div>
        </div>

        <!-- Total Net Cost of Employees Card -->
        <div class="card mb-4">
            <div class="card-header">
                <h5>Total Net Cost of Employees</h5>
                <h6 class="text-muted">Calculated by the difference between Total Employee Cost and Dependent Healthcare Premiums.</h6>
            </div>
            <div class="card-body">
                <ul class="list-group">
                    <li class="list-group-item">Total Difference: @Model.Report.TotalDifference</li>
                </ul>
            </div>
        </div>

        <!-- Annual Employee Statistics -->
        <h2 class="text-center mb-4">Annual Employee Statistics</h2>
        <div class="row">
            <!-- Employee Statistics Card -->
            <div class="col-md-4 mb-4">
                <div class="card">
                    <div class="card-header bg-primary text-white">
                        <h5>Employee Statistics</h5>
                    </div>
                    <div class="card-body">
                        <ul class="list-group">
                            <li class="list-group-item">Average Age: @Model.Report.EmployeeAvgAge</li>
                            <li class="list-group-item">Minimum Age: @Model.Report.EmployeeMinAge</li>
                            <li class="list-group-item">Maximum Age: @Model.Report.EmployeeMaxAge</li>
                            <li class="list-group-item">Average Salary: @Model.Report.EmployeeAvgSalary</li>
                            <li class="list-group-item">Minimum Salary: @Model.Report.EmployeeMinSalary</li>
                            <li class="list-group-item">Maximum Salary: @Model.Report.EmployeeMaxSalary</li>
                        </ul>
                        <canvas id="employeeChart"></canvas>
                    </div>
                </div>
            </div>

            <!-- Manager Statistics Card -->
            <div class="col-md-4 mb-4">
                <div class="card">
                    <div class="card-header bg-success text-white">
                        <h5>Manager Statistics</h5>
                    </div>
                    <div class="card-body">
                        <ul class="list-group">
                            <li class="list-group-item">Average Age: @Model.Report.ManagerAvgAge</li>
                            <li class="list-group-item">Minimum Age: @Model.Report.ManagerMinAge</li>
                            <li class="list-group-item">Maximum Age: @Model.Report.ManagerMaxAge</li>
                            <li class="list-group-item">Average Salary: @Model.Report.ManagerAvgSalary</li>
                            <li class="list-group-item">Minimum Salary: @Model.Report.ManagerMinSalary</li>
                            <li class="list-group-item">Maximum Salary: @Model.Report.ManagerMaxSalary</li>
                        </ul>
                        <canvas id="managerChart"></canvas>
                    </div>
                </div>
            </div>

            <!-- Zookeeper Statistics Card -->
            <div class="col-md-4 mb-4">
                <div class="card">
                    <div class="card-header bg-warning text-dark">
                        <h5>Zookeeper Statistics</h5>
                    </div>
                    <div class="card-body">
                        <ul class="list-group">
                            <li class="list-group-item">Average Age: @Model.Report.ZookeeperAvgAge</li>
                            <li class="list-group-item">Minimum Age: @Model.Report.ZookeeperMinAge</li>
                            <li class="list-group-item">Maximum Age: @Model.Report.ZookeeperMaxAge</li>
                            <li class="list-group-item">Average Salary: @Model.Report.ZookeeperAvgSalary</li>
                            <li class="list-group-item">Minimum Salary: @Model.Report.ZookeeperMinSalary</li>
                            <li class="list-group-item">Maximum Salary: @Model.Report.ZookeeperMaxSalary</li>
                        </ul>
                        <canvas id="zookeeperChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- JavaScript and Chart.js -->
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Employee Chart
        const employeeCtx = document.getElementById('employeeChart').getContext('2d');
        const managerCtx = document.getElementById('managerChart').getContext('2d');
        const zookeeperCtx = document.getElementById('zookeeperChart').getContext('2d');

        // Chart Data & Configuration
        const employeeChart = new Chart(employeeCtx, {
            type: 'bar',
            data: {
                labels: ['Average Age', 'Min Age', 'Max Age', 'Avg Salary', 'Min Salary', 'Max Salary'],
                datasets: [{
                    label: 'Employee Stats',
                    data: [
        @Model.Report.EmployeeAvgAge,
        @Model.Report.EmployeeMinAge,
        @Model.Report.EmployeeMaxAge,
        @Model.Report.EmployeeAvgSalary,
        @Model.Report.EmployeeMinSalary,
        @Model.Report.EmployeeMaxSalary
                            ],
                    backgroundColor: 'rgba(153, 106, 71, 0.5)', /* Soft brown */
                    borderColor: 'rgba(153, 106, 71, 1)', /* Darker brown */
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

        const managerChart = new Chart(managerCtx, {
            type: 'bar',
            data: {
                labels: ['Average Age', 'Min Age', 'Max Age', 'Avg Salary', 'Min Salary', 'Max Salary'],
                datasets: [{
                    label: 'Manager Stats',
                    data: [
        @Model.Report.ManagerAvgAge,
        @Model.Report.ManagerMinAge,
        @Model.Report.ManagerMaxAge,
        @Model.Report.ManagerAvgSalary,
        @Model.Report.ManagerMinSalary,
        @Model.Report.ManagerMaxSalary
                            ],
                    backgroundColor: 'rgba(40, 167, 69, 0.5)', /* Soft green */
                    borderColor: 'rgba(40, 167, 69, 1)', /* Dark green */
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

        const zookeeperChart = new Chart(zookeeperCtx, {
            type: 'bar',
            data: {
                labels: ['Average Age', 'Min Age', 'Max Age', 'Avg Salary', 'Min Salary', 'Max Salary'],
                datasets: [{
                    label: 'Zookeeper Stats',
                    data: [
        @Model.Report.ZookeeperAvgAge,
        @Model.Report.ZookeeperMinAge,
        @Model.Report.ZookeeperMaxAge,
        @Model.Report.ZookeeperAvgSalary,
        @Model.Report.ZookeeperMinSalary,
        @Model.Report.ZookeeperMaxSalary
                            ],
                    backgroundColor: 'rgba(255, 193, 7, 0.5)', /* Soft yellow */
                    borderColor: 'rgba(255, 193, 7, 1)', /* Darker yellow */
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    </script>
</body>
</html>
