@page
@model RazorLogin.Pages.Admin.PurchRep.IndexModel

@{
    ViewData["Title"] = "Zoo Purchases Report";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>

    <!-- Include Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-KyZXEJgX5p6b9d6owxNf8VGRyT2fK4IFk1Qk4Lfu2R1v1zOTJ4vjbs6F5hFGZJYI" crossorigin="anonymous">

    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <!-- Chart.js Zoom Plugin -->
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-zoom"></script>

    <!-- You can add other custom stylesheets here if needed -->
</head>
<body>
    <div class="container mt-5">
        <h2>Zoo Purchases Report</h2>

        <!-- Date Range Form -->
        <form method="get" class="mb-4">
            <div class="row">
                <div class="col-md-3">
                    <label for="startDate" class="form-label">Start Date:</label>
                    <input type="date" id="startDate" name="startDate" class="form-control" value="@Model.StartDate.ToString("yyyy-MM-dd")" />
                </div>
                <div class="col-md-3">
                    <label for="endDate" class="form-label">End Date:</label>
                    <input type="date" id="endDate" name="endDate" class="form-control" value="@Model.EndDate.ToString("yyyy-MM-dd")" />
                </div>
                <div class="col-md-3 d-flex align-items-end">
                    <button type="submit" class="btn btn-primary">Generate Report</button>
                </div>
            </div>
        </form>

        <!-- Report Summary -->
        <div class="card mb-4">
            <div class="card-header">
                <h3>Report Summary</h3>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-4">
                        <p><strong>Total Revenue:</strong> @(Model.TotalRevenue ?? 0) </p>
                    </div>
                    <div class="col-md-4">
                        <p><strong>Highest Single Purchase:</strong> @(Model.HighestPurchase ?? 0) </p>
                    </div>
                    <div class="col-md-4">
                        <p><strong>Lowest Single Purchase:</strong> @(Model.LowestPurchase ?? 0) </p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Customer Purchases Table -->
        <div class="card mb-4">
            <div class="card-header">
                <h3>Customer Purchases</h3>
            </div>
            <div class="card-body">
                <table class="table table-bordered table-striped">
                    <thead>
                        <tr>
                            <th>Customer ID</th>
                            <th>Age</th>
                            <th>Membership Tier</th>
                            <th>Total Purchases</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var customer in Model.CustomerData)
                        {
                            <tr>
                                <td>@customer.Customer_ID</td>
                                <td>@customer.CustomerAge</td>
                                <td>@customer.Membership_type</td>
                                <td>@customer.TotalPurchasesOverall</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Purchases Per Day Bar Chart -->
        <div class="card mb-4">
            <div class="card-header">
                <h3>Purchases Per Day (Bar Chart)</h3>
                <p class="text-muted">This chart shows the total purchases per day within the selected date range.</p>
            </div>
            <div class="card-body">
                <canvas id="purchasesPerDayChart" width="400" height="200"></canvas>
            </div>
        </div>

        <!-- Purchases Per Day Table -->
        <div class="card mb-4">
            <div class="card-header">
                <h3>Purchases Per Day (Table)</h3>
                <p class="text-muted">This table provides the detailed number of purchases for each day in the selected range.</p>
            </div>
            <div class="card-body">
                <table class="table table-bordered table-striped">
                    <thead>
                        <tr>
                            <th>Purchase Date</th>
                            <th>Total Purchases</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var purchase in Model.PurchasesPerDay)
                        {
                            <tr>
                                <td>@purchase.Purchase_date.ToString("yyyy-MM-dd")</td>
                                <td>@purchase.TotalPurchases</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

    </div>

    <!-- Optional Bootstrap JS (if needed for interactivity) -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        var ctx = document.getElementById('purchasesPerDayChart').getContext('2d');

        // Prepare the data for the chart
        var purchasesData = @Html.Raw(Json.Serialize(Model.PurchasesPerDay));

        // Get the start and end dates
        var startDate = new Date('@Model.StartDate.ToString("yyyy-MM-dd")');
        var endDate = new Date('@Model.EndDate.ToString("yyyy-MM-dd")');

        // Create an array of all dates in the range from StartDate to EndDate
        var allDates = [];
        var currentDate = new Date(startDate);
        while (currentDate <= endDate) {
            allDates.push(new Date(currentDate));
            currentDate.setDate(currentDate.getDate() + 1);
        }

        // Prepare labels (dates) and data (total purchases)
        var labels = allDates.map(function (date) {
            return date.toISOString().split('T')[0]; // Format as "yyyy-MM-dd"
        });

        var data = labels.map(function (date) {
            var purchaseForDate = purchasesData.find(function (purchase) {
                return purchase.purchase_date === date;
            });

            // Return purchase count, defaulting to 0 if no data found for this date
            return purchaseForDate ? purchaseForDate.totalPurchases : 0;
        });

        // Create the chart
        var chart = new Chart(ctx, {
            type: 'bar',  // Changed to 'bar' for bar chart
            data: {
                labels: labels,  // Dates as labels
                datasets: [{
                    label: 'Total Purchases',
                    data: data,  // Number of purchases as data
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',  // Light green bars
                    borderColor: 'rgba(75, 192, 192, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'top',
                    },
                    tooltip: {
                        callbacks: {
                            label: function (tooltipItem) {
                                return tooltipItem.raw + ' purchases';
                            }
                        }
                    }
                },
                scales: {
                    x: {
                        title: {
                            display: true,
                            text: 'Date'
                        },
                        ticks: {
                            autoSkip: true,
                            maxRotation: 45,
                            minRotation: 45,
                            maxTicksLimit: 10
                        }
                    },
                    y: {
                        title: {
                            display: true,
                            text: 'Purchases'
                        },
                        beginAtZero: true
                    }
                },
                interaction: {
                    mode: 'index',
                    intersect: false
                },
                zoom: {
                    zoom: {
                        wheel: {
                            enabled: true,
                            modifierKey: 'ctrl'
                        },
                        pinch: {
                            enabled: true
                        },
                        mode: 'xy',
                    },
                    pan: {
                        enabled: true,
                        mode: 'xy'
                    }
                }
            }
        });
    </script>
</body>
</html>
